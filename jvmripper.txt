1. Метод .clone().
    Нативная реализация метода .clone() представлена по следующему пути:

    11 ---> hotspot ---> share ---> prims ---> jvm.cpp [строки кода 643-647]

            JVM_ENTRY(jobject, JVM_Clone(JNIEnv* env, jobject handle))
                JVMWrapper("JVM_Clone");
                Handle obj(THREAD, JNIHandles::resolve_non_null(handle));
                Klass* klass = obj->klass();
                JvmtiVMObjectAllocEventCollector oam;


2. Исключения.
    2.1.1. Если можно предусмотреть логику проверки наличия факта
    - обработки исключения;
    - передачи вызывающему методу исключения  - то такое исключение относится к группе проверяемых исключений.
    Данная логика заложена разработчиками языка Java в компилятор javac.

    2.1.2. Если нельзя предусмотреть логику проверки наличия факта
    - обработки исключения;
    - передачи вызывающему методу исключения
    или,
    если обработка/передача вызывающему методу исключения в значительной степени увеличивает объем кода (например,проверять обработку/передачу вызывающему методу объекта ArithmeticException при
    каждом написании операции деления) то такое исключение относится к группе непроверяемых исключений.

    Причина невозможности проверки наличия факта обработки непроверяемого исключения или передачи непроверяемого исключения вызывающему методу следующая:
    - место возникновения исключетельной ситуации;
    - причина возникновения исключительной ситуации
    является характеристикой стохастической в момент выполнения программы (неопределенной, случайной).
    К непроверяемым исключениям относятся исключения класса Error и RunTimeException и иные подклассы, унаследованные от данных суперклассов.

    2.2. Полный перечень всех исключений, которые непосредственно (объект исключения создается в JVM на языке C++ и только потом преобразуются в объект исключения языка Java) может сгененрировать JVM представлен по следующему пути:

    11 ---> hotspot ---> share ---> classfile ---> vmSymbols.hhp [строки кода 173-223]


    ----------------------------------------------------------------------------------------------------------------------------------------------
    Выражение, включающее в себя зарезервированное слово "throw" компилируется в байт-код инструкцию ATHROW.
    Реализация интерпритации байт-код инструкции ATHROW в JVM представлена по следующему пути:

    11 ---> hotspot ---> share ---> interpreter ---> bytecodeInterpreter.cpp [строки кода 2734 - 2740]

            CASE(_athrow): {
                      oop except_oop = STACK_OBJECT(-1);
                      CHECK_NULL(except_oop);
                      // set pending_exception so we use common code
                      THREAD->set_pending_exception(except_oop, NULL, 0);
                      goto handle_exception;
                  }
