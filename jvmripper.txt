1. Метод .clone().
    Нативная реализация метода .clone() представлена по следующему пути:

    11 ---> hotspot ---> share ---> prims ---> jvm.cpp [строки кода 643-647]

            JVM_ENTRY(jobject, JVM_Clone(JNIEnv* env, jobject handle))
                JVMWrapper("JVM_Clone");
                Handle obj(THREAD, JNIHandles::resolve_non_null(handle));
                Klass* klass = obj->klass();
                JvmtiVMObjectAllocEventCollector oam;


2. Исключения.
    2.1.1. Если логику проверки наличия факта обработки/передачи вызывающему методу исключения можно предусмотреть - то такое исключение называется проверяемым.
    Данная логика заложена в компилятор javac.

    2.1.2. Если логику проверки наличия факта обработки/передачи вызывающему методу исключения нельзя предусмотреть - то такое исключение называется непроверяемыми.
    Причина - невозможность предусмотреть все возможные ситуации во время выполнения программы и предусмотреть соответствующую логику проверки в компиляторе.
    Именно поэтому к непроверяемым исключения относятся исключения класса Error и RuntimeException и иные подклассы, унаследованные от данных суперклассов.

    2.2. Полный перечень всех исключений, которые непосредственно может сгененрировать JVM представлен по следующему пути:

    11 ---> hotspot ---> share ---> classfile ---> vmSymbols.hhp [строки кода 173-223]


    ----------------------------------------------------------------------------------------------------------------------------------------------
    Выражение, включающее в себя зарезервированное слово "throw" компилируется в байт-код инструкцию ATHROW.
    Реализация интерпритации байт-код инструкции ATHROW в JVM представлена по следующему пути:

    11 ---> hotspot ---> share ---> interpreter ---> bytecodeInterpreter.cpp [строки кода 2734 - 2740]

            CASE(_athrow): {
                      oop except_oop = STACK_OBJECT(-1);
                      CHECK_NULL(except_oop);
                      // set pending_exception so we use common code
                      THREAD->set_pending_exception(except_oop, NULL, 0);
                      goto handle_exception;
                  }
